name: Build

on: [push]

# on:
#   push:
#     branches:
#       - main
#     paths:
#       - 'build/**'
#       - 'scripts/*'
#       - 'src/**'
#       - 'static/**'
#       - 'package.json'
#       - 'package-lock.json'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    environment: package
    strategy:
      matrix:
        os: [macos-latest]
        # os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js 16
        uses: actions/setup-node@v3
        with:
          node-version: "16.x"
      # - name: Get npm cache directory
      #   id: npm-cache
      #   run: |
      #     echo "::set-output name=dir::$(npm config get cache)"
      # - uses: actions/cache@v1
      #   with:
      #     path: ${{ steps.npm-cache.outputs.dir }}
      #     key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-node-
      - name: Install
        run: |
          yarn
      # - name: Get Build Number
      #   id: vars
      #   uses: ./.github/actions/get-build-number
      - name: Build
        run: yarn build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
        # env:
        #   BUILD_NUMBER: ${{ steps.vars.outputs.build_number }}
        #   FULL_RELEASE: ${{ startsWith(github.event.commits[0].message, 'chore(release)') }}
      # If you build nsis web, you should uncomment below
      # - name: Upload Web Build
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: build
      #     path: build/nsis-web/*.*
      # - name: Upload Build
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: build
      #     path: build/built/*.dmg
      # - name: Get Version
      #   id: get_version
      #   run: echo "::set-output name=version::$(cat package.json |grep version|sed s/\"version\"\:[[:space:]]\"//g|sed s/\",//g|sed s/[[:space:]]*//g)"
      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: v${{ steps.get_version.outputs.version }}
      #     release_name: Release v${{ steps.get_version.outputs.version }}
      #     draft: false
      #     prerelease: false
      # - name: Upload Release Asset
      #   id: upload-release-asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
      #     asset_path: build/built/schedule-pro-${{ steps.get_version.outputs.version }}.dmg
      #     asset_name: schedule-pro${{ steps.get_version.outputs.version }}.dmg
      #     asset_content_type: application/dmg
      # - name: Upload Windows Asar
      #   if: ${{ runner.os == 'Windows' && startsWith(github.event.commits[0].message, 'chore(release)') }}
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: build
      #     path: build/win-unpacked/resources/app.asar
